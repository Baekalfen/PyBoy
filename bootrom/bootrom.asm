SECTION "bootrom", ROM0[$0000]
main:
.loop:
    ; Init stackpointer
    ld SP, $FFFE

    ; Enable LCD and background tilemap
    ld A, $91
    ld [$FF00+$40], A

    ; Set color palette to 11111100
    ld A, $fc
    ld [$FF00+$47], A

    ; Copy 96 bytes of logo data to VRAM
    ld B, 96
    ld HL, .logo
    ld DE, $8010 ; Place it 1 tile in, so tile 0 stays white
    call .logo_memcpy

    ; Write range 0-5 in tile map
    ld B, 6
    ld A, 1
    ld HL, $9807+($20*8)
    call .range
    ; Write range 6-11 in tile map
    ld B, 6
    ld HL, $9807+($20*9)
    call .range

    ; Recreate state
    ld B, 6
    ld HL, .sec0
    ld DE, $FF0F
    call .memcpy

    ld B, 3
    ld HL, .sec1
    ld DE, $FF24
    call .memcpy

    ld B, 4
    ld HL, .sec2
    ld DE, $FF41
    call .memcpy

    ; Call stack.. Hard to leave in exact state
    ; ld B, 3
    ; ld HL, .sec3
    ; ld DE, $FFFA
    ; call .memcpy

    ; Wait an arbitrary 60 frames
    ld B, 60
.enter_vblank
    ld A, [$FF00+$44]
    cp $90
    jp NZ, .enter_vblank
.exit_vblank
    ld A, [$FF00+$44]
    cp $90
    jp Z, .exit_vblank
    ; One frame has passed, decrement counter
    dec B
    jp NZ, .enter_vblank
    jp .end

.memcpy
    ; Regular memcpy. HL is source, DE is target, B is length
    ld A, [HL+]
    ld [DE], A
    inc DE
    dec B
    jp NZ, .memcpy
    RET

.logo_memcpy
    ; Same as above, but writes every bytes twice. Because the logo is black and white, we can use the same pixel data
    ; twice. This gives colors in the color palette of '00' and '11'. For more info, see documentation of the tile
    ; graphics format.
    ld A, [HL+]
    ld [DE], A
    inc DE
    ld [DE], A
    inc DE
    dec B
    jp NZ, .logo_memcpy
    RET

.range
    ; Write a range of A..B+A to the location of HL
    ld [HL+], A
    inc A
    dec B
    jp NZ, .range
    ret

; Section 0, 1, 2 and 3 of arbitrary values, which the original boot ROM writes.
.sec0: ; 0xFF0F
    DB $01, $00, $80, $F3, $C1, $87
.sec1: ; 0xFF24
    DB $77, $F3, $80
.sec2: ; 0xFF41
    DB $01, $00, $00, $99
;.sec3: ; 0xFFFA
;    DB $39, $01, $2E

; Logo generated by png_to_tiles.py. Remember to update values for 'logo_memcpy' and 'range' if dimensions change
INCLUDE "logo.asm"

SECTION "epilog", ROM0[$00FC]
.end
    ld A, $01
    ld [$FF00+$50], A
