SECTION "bootrom", ROM0[$0000]
    ; Init stackpointer
    ld sp, $fffe

    ; Erase VRAM - it is filled with garbage on startup on hardware
    xor A
    ld HL,$9fff
Erase:
    ld [HL-],A
    bit 7,H
    jr nz, Erase

    ; ####################
    ; Tile data copying
    ; ####################

    ; Copy 48 bytes of logo data to VRAM
    ; Write length
    ; Use double write
    ld BC, 48 << 8 | 1
    ld HL, Logo  ; Logo data start
    ld DE, $8010 ; Place it 1 tile in, so tile 0 stays white
Memcpy:
    ; Logo memcpy. HL is source, DE is target, B is length
    ld A, [HL+]

    ; Double up memory values for VRAM, as source image is 1-bit
    ld [DE], A
    inc DE
    ld [DE], A
    inc DE

    dec B
    jr NZ, Memcpy

    ; ####################
    ; Tile placement
    ; ####################
    ; Add two upper part of P for the P and B
    ld a, 1 ; A is 0 from before so just increment
    ld HL, $9808+($20*8)
    ld [HL+], A         ; The P position
    inc HL              ; Empty space above y
    ld [HL], A          ; The B position

    ; Add lower part of P, upper part of y, a wrong tile for the lower part of B, and the O. We'll correct the B later.
    ld B, 4             ; Loop counter
    ld A, 2             ; P2 tile index
    ld HL, $9808+($20*9)
FourRange:
    ld [HL+], A
    inc A
    dec B
    jr NZ, FourRange

    ; Add the upper part of the last Y at the current HL position
    ld A, 3             ; Y1 tile index
    ld [HL], A

    add A, A            ; Y2 tile index coincidentally 2xA
    ld HL, $9808+($20*10)+1
    ld [HL+], A
    inc HL
    inc HL
    ld [HL], A

    ; Enable LCD and background tilemap
    ld A, $91
    ldh [$FF00+$40], A

    ; Set color palette to 11111100
    ld A, $fc
    ldh [$FF00+$47], A

    ; Sound Setup
    ld a, $80
    ldh [$26], a ; Enable sound - NR52
    ldh [$11], a ; Use 50% duty cycle - NR11
    ld a, $f3
    ldh [$12], a
    ldh [$25], a
    ld a, $77
    ldh [$24], a

    ; #########################
    ; Graphics effect and wait
    ; #########################

    ; Wait an arbitrary 60 frames

    ld C, 60        ; Frame count

    xor A
    ld D, A         ; Reset D
    ld B, A         ; Reset B
WaitVblank:
    ; Test vblank
    ldh A, [$FF00+$44]
    cp $90
    jr Z, ExitVblank

    ld E, A         ; Save LY in E

    ; Invert frame counter to 1-60 instead of 60-1
    ld A, C
    cpl
    sub ($ff-16*7)  ; Start X lines down. Do it in multiple of 16 to fit wave

    ; Cut out one wave
    ; Is A larger than LY? Then we want the effect
    cp E
    jr C, NoEffect
    ; Is LY no more than 16 lines larger than A?
    sub A, 16
    cp E
    jr C, Effect
    ; Fall through to no effect
NoEffect:
    xor a
    ldh [$FF00+$43], A
    jr WaitVblank

PlaySound:
    ; Adjust frequency sweep
    ld a, %0010011
    ldh [$10], a

    ld a, $48
    ldh [$13], a

    ; Trigger
    ld a, $81
    ldh [$14], a
    ret

AdjSound:
    ; Adjust frequency sweep
    ld a, %0011001
    ldh [$10], a

    ; Trigger
    ld a, $81
    ldh [$14], a
    ret


WaveTable:
    DB 0, 0, 1, 2, 2, 3, 3, 3, 2, 1, 1, 0, 0, 0, 0, 0

Effect:
    ld A, C        ; Load frame counter for "time"
    add A, E         ; add LY from E
    and $0F         ; Clamp LY value to lookup table length
    ld E, A         ; Save LY in E
    ld HL, WaveTable
    add HL, DE      ; look up in wave table
    ld A, [HL]

    ldh [$FF00+$43], A
    jr WaitVblank

ExitVblank:
    ldh A, [$FF00+$44]
    cp $90
    jr Z, ExitVblank
    ld a, c

    cp 27
    call z, PlaySound

    cp 31
    call z, AdjSound

    ; One frame has passed, decrement counter
    dec C
    jr NZ, WaitVblank

    ; TODO: Restore register values?
    jr Exit

; Logo generated by png_to_tiles.py. Remember to update copy range if dimensions change
INCLUDE "logo.asm"

SECTION "epilog", ROM0[$00FC]
Exit:
    ; A is the register that matters
    ; Games check a for $01 and $11, for DMG and CGB respectively
    ld A, $01
    ldh [$FF00+$50], A
