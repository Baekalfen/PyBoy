name: PyTest PyBoy

on:
  push:
    branches:
      - master
  pull_request:
  release:
    types: [published]

jobs:
  test_cython:
    name: Cython - Build, Test and Deploy
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        python-version: [3.7, 3.8, 3.9, "3.10"]

    steps:
    - uses: actions/checkout@v2
    - name: Setup Ubuntu
      if: ${{ contains(matrix.os, 'ubuntu-latest') }}
      run: |
        echo "TEST_CI=1" >> $GITHUB_ENV
        echo "TEST_NO_UI=1" >> $GITHUB_ENV
        sudo apt update
        sudo apt install libsdl2-dev
    - name: Setup macOS
      if: ${{ contains(matrix.os, 'macos-latest') }}
      run: |
        echo "TEST_CI=1" >> $GITHUB_ENV
        echo "TEST_NO_UI=1" >> $GITHUB_ENV
        # echo "AGENT_TOOLSDIRECTORY=/Users/runner/hostedtoolcache" >> $GITHUB_ENV
        brew install sdl2
    - name: Setup Windows
      if: ${{ contains(matrix.os, 'windows-latest') }}
      run: |
        (New-Object Net.WebClient).DownloadFile('https://www.libsdl.org/release/SDL2-devel-2.0.10-VC.zip', 'SDL2-devel-2.0.10-VC.zip')
        Expand-Archive -Force 'SDL2-devel-2.0.10-VC.zip' C:\SDL2\

        echo "PYSDL2_DLL_PATH=C:\SDL2\SDL2-2.0.10\lib\x64" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "TEST_CI=1" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "TEST_NO_UI=1" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Python dependencies
      run: |
        pip install wheel
    - name: Build PyBoy
      run: |
        python setup.py build_ext --inplace
    - name: Run PyTest
      run: |
        python setup.py test
    - name: Build and upload wheel
      if: ${{ github.event_name == 'release' && github.event.action == 'published' && !contains(matrix.os, 'linux') }}
      run: |
        echo "Building wheel and uploading"
        pip install wheel twine
        python setup.py sdist bdist_wheel
        python -m twine upload --non-interactive -u '__token__' -p ${{ secrets.PYPI_API_TOKEN }} dist/*.whl
        echo "Uploading source code"
        python -m twine upload --non-interactive --skip-existing -u '__token__' -p ${{ secrets.PYPI_API_TOKEN }} dist/*.tar.gz

  test_pypy:
    name: PyPy - Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        python-version: ['pypy-3.7', 'pypy-3.8', 'pypy-3.9']
        exclude:
        # Not worth the time to fix:
        # The headers or library files could not be found for zlib, a required dependency when compiling Pillow from source.
        - os: windows-latest
          python-version: pypy-3.7
        - os: windows-latest
          python-version: pypy-3.9
    steps:
    - uses: actions/checkout@v2
    - name: Setup Ubuntu
      if: ${{ contains(matrix.os, 'ubuntu-latest') }}
      run: |
        echo "TEST_CI=1" >> $GITHUB_ENV
        echo "TEST_NO_UI=1" >> $GITHUB_ENV
        sudo apt update
        sudo apt install libsdl2-dev
    - name: Setup macOS
      if: ${{ contains(matrix.os, 'macos-latest') }}
      run: |
        echo "TEST_CI=1" >> $GITHUB_ENV
        echo "TEST_NO_UI=1" >> $GITHUB_ENV
        # echo "AGENT_TOOLSDIRECTORY=/Users/runner/hostedtoolcache" >> $GITHUB_ENV
        brew install sdl2
    - name: Setup Windows
      if: ${{ contains(matrix.os, 'windows-latest') }}
      run: |
        (New-Object Net.WebClient).DownloadFile('https://www.libsdl.org/release/SDL2-devel-2.0.10-VC.zip', 'SDL2-devel-2.0.10-VC.zip')
        Expand-Archive -Force 'SDL2-devel-2.0.10-VC.zip' C:\SDL2\

        echo "PYSDL2_DLL_PATH=C:\SDL2\SDL2-2.0.10\lib\x64" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "TEST_CI=1" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "TEST_NO_UI=1" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install PyPy dependencies
      run: |
        pypy3 -m ensurepip
        pypy3 -m pip install wheel
    - name: Fix Numpy Polyfit error
      if: ${{ contains(matrix.os, 'macOS') }}
      run: |
        # Fix issue with NumPy and PolyFit: https://github.com/numpy/numpy/issues/15947
        rm -vf ~/Library/Caches/pip/wheels/*/*/*/*/*numpy*
        # brew install openblas
        OPENBLAS="$(brew --prefix openblas)" pypy3 -m pip install numpy
    - name: Run PyTest
      run: |
        pypy3 setup.py test

  test_manylinux:
    name: ManyLinux - Build, Test and Deploy
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['cp36-cp36m', 'cp37-cp37m', 'cp38-cp38', 'cp39-cp39', 'cp310-cp310']

    steps:
    - uses: actions/checkout@v2
    - name: Docker Run Action
      uses: addnab/docker-run-action@v3
      with:
        image: quay.io/pypa/manylinux2010_x86_64:latest
        options: -v ${{ github.workspace }}:/work -e GITHUB_REF=${{ github.ref }} --rm
        run: |
          echo "Linking Python version ${{ matrix.python-version }}"
          ln -s "/opt/python/${{ matrix.python-version }}/bin/python3" /usr/local/bin/python

          echo "Installing SDL2"
          yum -y install mercurial
          bash -c "hg clone https://hg.libsdl.org/SDL SDL; cd SDL; mkdir build; cd build; ../configure; make; make install"
          ln -s /usr/local/lib/libSDL2-2.0.so.0 /usr/lib64/libSDL2-2.0.so.0

          cd /work
          echo "Starting build"
          python setup.py build_ext --inplace

          echo "Starting tests"
          TEST_CI=1 TEST_NO_UI=1 python setup.py test

          echo "Building wheel"
          python -m pip install wheel
          python setup.py sdist bdist_wheel

          python -m pip install auditwheel
          auditwheel repair dist/*.whl

          # Patching in the correct SDL2
          cd wheelhouse
          yum -y install zip
          for f in *.whl; do
              echo "Patching $f file..."
              SDLNAME=$(unzip -l $f | egrep -wo "(pyboy.libs/libSDL2.*$)")
              mkdir -p pyboy.libs
              cp /usr/local/lib/libSDL2-2.0.so.0 $SDLNAME
              # Updating single SDL2 file in the .zip (.whl)
              zip $f $SDLNAME
          done
          cd ..

          rm -rf dist/*.whl
          mv wheelhouse/*.whl dist/
          chmod 777 -R . # Fix permissions to help cleaning up outside of Docker
    - name: Set up Python 3.8 (just for PyPi upload)
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Upload wheel
      if: ${{ github.event_name == 'release' && github.event.action == 'published' }}
      run: |
        echo "Uploading wheel"
        pip install twine
        python -m twine upload --non-interactive -u '__token__' -p ${{ secrets.PYPI_API_TOKEN }} dist/*.whl
